{{pillar['headers']['salt']['file']}}
[DEFAULT]
# Show more verbose log output (sets INFO log level output)
#verbose = False
{%- if salt['pillar.get']('glance:verbose', False ) %}
verbose = {{ salt['pillar.get']('glance:verbose') }}
{% endif %}

# Show debugging output in logs (sets DEBUG log level output)
{%- if salt['pillar.get']('glance:debug', False ) %}
debug = {{ salt['pillar.get']('glance:debug') }}
{% endif %}


# Address to bind the registry server
bind_host = {{ salt['pillar.get']('endpoints:glance:bind_host', '0.0.0.0') }}

# Port the bind the registry server to
bind_port = {{ salt['pillar.get']('glance:registry_bind_port', '9191') }}

# Log to this file. Make sure you do not set the same log
# file for both the API and registry servers!
log_file = {{ salt['pillar.get']('glance:log_file:registry', '/var/log/glance/registry.log') }}

# Backlog requests when creating socket
backlog = {{ salt['pillar.get']('glance:backlog','4096') }}

# TCP_KEEPIDLE value in seconds when creating socket.
# Not supported on OS X.
tcp_keepidle = {{ salt['pillar.get']('glance:tcp_keepidle', '600') }}

# SQLAlchemy connection string for the reference implementation
# registry server. Any valid SQLAlchemy connection string is fine.
# See: http://www.sqlalchemy.org/docs/05/reference/sqlalchemy/connections.html#sqlalchemy.create_engine
#sql_connection = sqlite:////var/lib/glance/glance.sqlite
sql_connection=mysql://glance:{{ salt['pillar.get']('secrets:glance:db_password','password') }}@{{ salt['pillar.get']('endpoints:hosts:database', '127.0.0.1') }}/glance?charset=utf8

# Period in seconds after which SQLAlchemy should reestablish its connection
# to the database.
#
# MySQL uses a default `wait_timeout` of 8 hours, after which it will drop
# idle connections. This can result in 'MySQL Gone Away' exceptions. If you
# notice this, you can lower this value to ensure that SQLAlchemy reconnects
# before MySQL can drop the connection.
sql_idle_timeout = {{ salt['pillar.get']('glance:sql_idle_timeout', '360') }}


# Limit the api to return `param_limit_max` items in a call to a container. If
# a larger `limit` query param is provided, it will be reduced to this value.
api_limit_max = {{ salt['pillar.get']('glance:api_limit_max', '1000') }}

# If a `limit` query param is not provided in an api request, it will
# default to `limit_param_default`
limit_param_default = {{ salt['pillar.get']('glance:limit_param_default', '25') }}

# Role used to identify an authenticated user as administrator
#admin_role = admin
admin_role = {{ salt['pillar.get']('glance:admin_role', 'admin') }}

# Whether to automatically create the database tables.
# Default: False
#db_auto_create = False
db_auto_create = {{ salt['pillar.get']('glance:db_auto_create', 'False') }}

# ================= Syslog Options ============================

# Send logs to syslog (/dev/log) instead of to file specified
# by `log_file`
use_syslog = {{ salt['pillar.get']('glance:use_syslog', 'False') }}


# Facility to use. If unset defaults to LOG_USER.
syslog_log_facility = {{ salt['pillar.get']('glance:syslog_log_facility', 'LOG_LOCAL1') }}


# ================= SSL Options ===============================

# Certificate file to use when starting registry server securely
#cert_file = /path/to/certfile
{%- if salt['pillar.get']('glance:cert_file', False ) %}
cert_file = {{ salt['pillar.get']('glance:cert_file') }}
{% endif %}


# Private key file to use when starting registry server securely
#key_file = /path/to/keyfile
{%- if salt['pillar.get']('glance:key_file', False ) %}
key_file = {{ salt['pillar.get']('glance:key_file') }}
{% endif %}

# CA certificate file to use to verify connecting clients
#ca_file = /path/to/cafile
{%- if salt['pillar.get']('glance:ca_file', False ) %}
ca_file = {{ salt['pillar.get']('glance:ca_file') }}
{% endif %}


[keystone_authtoken]
#auth_host = 127.0.0.1
#auth_port = 35357
#auth_protocol = http
#admin_tenant_name = %SERVICE_TENANT_NAME%
#admin_user = %SERVICE_USER%
#admin_password = %SERVICE_PASSWORD%
auth_host = {{ salt['pillar.get']('keystone:auth_host', '127.0.0.1') }}
auth_port = {{ salt['pillar.get']('keystone:auth_port', '35357') }}
auth_protocol = {{ salt['pillar.get']('keystone:auth_protocol', 'http') }}
admin_tenant_name = {{ salt['pillar.get']('glance:admin_tenant_name', 'service' ) }}
admin_user = {{ salt['pillar.get']('glance:admin_user', 'glance') }}
admin_password = {{ salt['pillar.get']('secrets:service_password', 'password') }}
#memcache_servers = {{ salt['pillar.get']('endpoints:memcache:servers', '127.0.0.1:11211' ) }}
#token_cache_time = {{ salt['pillar.get']('endpoints:memcache:token_cache_time', '300' ) }}

[paste_deploy]
# Name of the paste configuration file that defines the available pipelines
#config_file = glance-registry-paste.ini

# Partial name of a pipeline in your paste configuration file with the
# service name removed. For example, if your paste section name is
# [pipeline:glance-registry-keystone], you would configure the flavor below
# as 'keystone'.
#flavor=
{%- if salt['pillar.get']('glance:flavor', False ) %}
flavor = {{ salt['pillar.get']('glance:flavor') }}
{% endif %}
