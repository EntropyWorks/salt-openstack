{{pillar['headers']['salt']['file']}}
[DEFAULT]
# Show more verbose log output (sets INFO log level output)
#verbose = False
{%- if salt['pillar.get']('glance:verbose', False ) %}
verbose = {{ salt['pillar.get']('glance:verbose') }}
{% endif %}

# Show debugging output in logs (sets DEBUG log level output)
{%- if salt['pillar.get']('glance:debug', False ) %}
debug = {{ salt['pillar.get']('glance:debug') }}
{% endif %}

# Log to this file. Make sure you do not set the same log
# file for both the API and registry servers!
log_file = {{ salt['pillar.get']('glance:log_file:cache', '/var/log/glance/image-cache.log' ) }}

# Send logs to syslog (/dev/log) instead of to file specified by `log_file`
use_syslog = {{ salt['pillar.get']('glance:use_syslog', 'False') }}

# Directory that the Image Cache writes data to
image_cache_dir = {{ salt['pillar.get']('glance:image_cache_dir', '/var/lib/glance/image-cache/' ) }}

# Number of seconds after which we should consider an incomplete image to be
# stalled and eligible for reaping
image_cache_stall_time = {{ salt['pillar.get']('glance:image_cache_stall_time', '86400') }}

# image_cache_invalid_entry_grace_period - seconds
#
# If an exception is raised as we're writing to the cache, the cache-entry is
# deemed invalid and moved to <image_cache_datadir>/invalid so that it can be
# inspected for debugging purposes.
#
# This is number of seconds to leave these invalid images around before they
# are elibible to be reaped.
image_cache_invalid_entry_grace_period = {{ salt['pillar.get']('glance:image_cache_invalid_entry_grace_period', '3600') }}

# Max cache size in bytes
image_cache_max_size = {{ salt['pillar.get']('glance:image_cache_max_size', '10737418240') }}

# Address to find the registry server
registry_host = {{ salt['pillar.get']('endpoints:glance:registry_host', '0.0.0.0') }}

# Port the registry server is listening on
registry_port = {{ salt['pillar.get']('glance:registry_port', '9191') }}

# Auth settings if using Keystone
# auth_url = http://127.0.0.1:5000/v2.0/
# admin_tenant_name = %SERVICE_TENANT_NAME%
# admin_user = %SERVICE_USER%
# admin_password = %SERVICE_PASSWORD%
auth_url = {{ salt['pillar.get']('keystone:service_protocol', 'http') }}://{{ salt['pillar.get']('keystone:service_host','127.0.0.1') }}:{{ salt['pillar.get']('keystone:service_port','5000') }}/v2.0/
admin_tenant_name = {{ salt['pillar.get']('glance:admin_tenant_name','service') }}
admin_user = {{ salt['pillar.get']('glance:admin_user','glance' ) }}
admin_password = {{ salt['pillar.get']('secrets:service_password', 'password') }}

# List of which store classes and store class locations are
# currently known to glance at startup.
# known_stores = glance.store.filesystem.Store,
#               glance.store.http.Store,
#               glance.store.rbd.Store,
#               glance.store.s3.Store,
#               glance.store.swift.Store,
known_stores = {{ salt['pillar.get']('glance:known_stores', 'glance.store.filesystem.Store' ) }}              

# ============ Filesystem Store Options ========================

# Directory that the Filesystem backend store
# writes image data to
filesystem_store_datadir = {{ salt['pillar.get']('glance:filesystem_store_datadir', '/var/lib/glance/images/') }}

# ============ Swift Store Options =============================

# Version of the authentication service to use
# Valid versions are '2' for keystone and '1' for swauth and rackspace
swift_store_auth_version = {{ salt['pillar.get']('glance:swift:store_auth_version', '2' ) }}

# Address where the Swift authentication service lives
# Valid schemes are 'http://' and 'https://'
# If no scheme specified,  default to 'https://'
# For swauth, use something like '127.0.0.1:8080/v1.0/'
swift_store_auth_address = {{ salt['pillar.get']('glance:swift:store_auth_address','127.0.0.1:5000/v2.0/' ) }}

# User to authenticate against the Swift authentication service
# If you use Swift authentication service, set it to 'account':'user'
# where 'account' is a Swift storage account and 'user'
# is a user in that account
swift_store_user = {{ salt['pillar.get']('glance:swift:store_user','jdoe:jdoe' ) }}

# Auth key for the user authenticating against the
# Swift authentication service
swift_store_key = {{ salt['pillar.get']('secrets:glance:swift_store_key', 'a86850deb2742ec3cb41518e26aa2d89' ) }}

# Container within the account that the account should use
# for storing images in Swift
swift_store_container = {{ salt['pillar.get']('glance:swift:store_container', 'glance' ) }}

# Do we create the container if it does not exist?
swift_store_create_container_on_put = {{ salt['pillar.get']('glance:swift:store_create_container_on_put','False' ) }}


# What size, in MB, should Glance start chunking image files
# and do a large object manifest in Swift? By default, this is
# the maximum object size in Swift, which is 5GB
swift_store_large_object_size = {{ salt['pillar.get']('glance:swift:store_large_object_size', '5120' ) }}

# When doing a large object manifest, what size, in MB, should
# Glance write chunks to Swift? This amount of data is written
# to a temporary disk buffer during the process of chunking
# the image file, and the default is 200MB
swift_store_large_object_chunk_size = {{ salt['pillar.get']('glance:swift:store_large_object_chunk_size', '200' ) }}

# Whether to use ServiceNET to communicate with the Swift storage servers.
# (If you aren't RACKSPACE, leave this False!)
#
# To use ServiceNET for authentication, prefix hostname of
# `swift_store_auth_address` with 'snet-'.
# Ex. https://example.com/v1.0/ -> https://snet-example.com/v1.0/
swift_enable_snet = {{ salt['pillar.get']('glance:swift:enable_snet', 'False' ) }}

# ============ S3 Store Options =============================

# Address where the S3 authentication service lives
# Valid schemes are 'http://' and 'https://'
# If no scheme specified,  default to 'http://'
s3_store_host = 127.0.0.1:8080/v1.0/

# User to authenticate against the S3 authentication service
s3_store_access_key = <20-char AWS access key>

# Auth key for the user authenticating against the
# S3 authentication service
s3_store_secret_key = <40-char AWS secret key>

# Container within the account that the account should use
# for storing images in S3. Note that S3 has a flat namespace,
# so you need a unique bucket name for your glance images. An
# easy way to do this is append your AWS access key to "glance".
# S3 buckets in AWS *must* be lowercased, so remember to lowercase
# your AWS access key if you use it in your bucket name below!
s3_store_bucket = <lowercased 20-char aws access key>glance

# Do we create the bucket if it does not exist?
s3_store_create_bucket_on_put = False

# When sending images to S3, the data will first be written to a
# temporary buffer on disk. By default the platform's temporary directory
# will be used. If required, an alternative directory can be specified here.
# s3_store_object_buffer_dir = /path/to/dir

# ================= Security Options ==========================

# AES key for encrypting store 'location' metadata, including
# -- if used -- Swift or S3 credentials
# Should be set to a random string of length 16, 24 or 32 bytes
# metadata_encryption_key = <16, 24 or 32 char registry metadata key>
{%- if pillar['secrets']['glance']['metadata_encryption_key'] %}
metadata_encryption_key = {{ salt['pillar.get']('secrets:glance:metadata_encryption_key') }}
{% endif %}
