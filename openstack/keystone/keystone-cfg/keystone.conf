{{pillar['headers']['salt']['file']}}
[DEFAULT]
# Show more verbose log output (sets INFO log level output)
#verbose = False
{%- if salt['pillar.get']('keystone:verbose', False ) %}
verbose = {{ salt['pillar.get']('keystone:verbose') }}
{% endif %}

# Show debugging output in logs (sets DEBUG log level output)
{%- if salt['pillar.get']('keystone:debug', False ) %}
debug = {{ salt['pillar.get']('keystone:debug') }}
{% endif %}

admin_token = {{ salt['pillar.get']('secrets:admin_token', 'replace_with_something_uniq') }}

use_syslog = {{ salt['pillar.get']('keystone:use_syslog', 'False') }}
log_file = {{ salt['pillar.get']('keystone:log_file', 'keystone.log') }}
log_dir = {{ salt['pillar.get']('keystone:log_dir', '/var/log/keystone') }}

[sql]
connection = mysql://keystone:{{ salt['pillar.get']('secrets:keystone:db_password', 'password') }}@{{ salt['pillar.get']('endpoints:hosts:database', '127.0.0.1') }}/keystone?charset=utf8
idle_timeout = {{ salt['pillar.get']('keystone:idle_timeout', '360') }}

[identity]
driver = {{ salt['pillar.get']('heystone:identity_driver', 'keystone.identity.backends.sql.Identity') }}

[trust]
driver = {{ salt['pillar.get']('keystone:trust_driver', 'keystone.trust.backends.sql.Trust') }}

[catalog]
driver = {{ salt['pillar.get']('keystone:catalog_driver', 'keystone.catalog.backends.sql.Catalog') }}

[token]
driver = {{ salt['pillar.get']('keystone:token_driver', 'keystone.token.backends.sql.Token') }}


[policy]
driver = {{ salt['pillar.get']('keystone:policy_driver', 'keystone.policy.backends.sql.Policy') }}

[ec2]
driver = {{ salt['pillar.get']('keystone:ec2_driver', 'keystone.contrib.ec2.backends.sql.Ec2') }}

[ssl]
enable = {{ salt['pillar.get']('keystone:ssl_enable', 'True') }}
certfile = {{ salt['pillar.get']('keystone:certfile') }}
keyfile = {{ salt['pillar.get']('keystone:keyfile') }}
cert_required = {{ salt['pillar.get']('keystone:cert_required', 'False') }}

[signing]
token_format = {{ salt['pillar.get']('keystone:token_format', 'UUID') }}
certfile = {{ salt['pillar.get']('keystone:signing_certfile', '/etc/keystone/ssl/certs/signing_cert.pem') }}
keyfile = {{ salt['pillar.get']('keystone:signing_keyfile', '/etc/keystone/ssl/private/signing_key.pem') }}
ca_certs = {{ salt['pillar.get']('keystone:signing_ca_certs', '/etc/keystone/ssl/certs/ca.pem') }}
key_size = {{ salt['pillar.get']('keystone:ssl:default_bits', '2048') }}
valid_days = {{ salt['pillar.get']('keystone:ssl:default_days', '3650') }}
ca_password = {{ salt['pillar.get']('keystone:ca_password', 'None') }}

[ldap]
# Not used

[auth]
methods = password,token
password = keystone.auth.plugins.password.Password
token = keystone.auth.plugins.token.Token

[filter:debug]
paste.filter_factory = keystone.common.wsgi:Debug.factory

[filter:token_auth]
paste.filter_factory = keystone.middleware:TokenAuthMiddleware.factory

[filter:admin_token_auth]
paste.filter_factory = keystone.middleware:AdminTokenAuthMiddleware.factory

[filter:xml_body]
paste.filter_factory = keystone.middleware:XmlBodyMiddleware.factory

[filter:json_body]
paste.filter_factory = keystone.middleware:JsonBodyMiddleware.factory

[filter:user_crud_extension]
paste.filter_factory = keystone.contrib.user_crud:CrudExtension.factory

[filter:crud_extension]
paste.filter_factory = keystone.contrib.admin_crud:CrudExtension.factory

[filter:ec2_extension]
paste.filter_factory = keystone.contrib.ec2:Ec2Extension.factory

[filter:s3_extension]
paste.filter_factory = keystone.contrib.s3:S3Extension.factory

[filter:url_normalize]
paste.filter_factory = keystone.middleware:NormalizingFilter.factory

[filter:sizelimit]
paste.filter_factory = keystone.middleware:RequestBodySizeLimiter.factory

[filter:stats_monitoring]
paste.filter_factory = keystone.contrib.stats:StatsMiddleware.factory

[filter:stats_reporting]
paste.filter_factory = keystone.contrib.stats:StatsExtension.factory

[filter:access_log]
paste.filter_factory = keystone.contrib.access:AccessLogMiddleware.factory

[app:public_service]
paste.app_factory = keystone.service:public_app_factory

[app:service_v3]
paste.app_factory = keystone.service:v3_app_factory

[app:admin_service]
paste.app_factory = keystone.service:admin_app_factory

[pipeline:public_api]
pipeline = {{ salt['pillar.get']('keystone:pipeline:public_api', 'access_log sizelimit stats_monitoring url_normalize token_auth admin_token_auth xml_body json_body debug user_crud_extension public_service') }}

[pipeline:admin_api]
pipeline = {{ salt['pillar.get']('keystone:pipeline:admin_api', 'access_log sizelimit stats_monitoring url_normalize token_auth admin_token_auth xml_body json_body debug stats_reporting crud_extension admin_service') }}

[pipeline:api_v3]
pipeline = {{ salt['pillar.get']('keystone:pipeline:api_v3', 'access_log sizelimit stats_monitoring url_normalize token_auth admin_token_auth xml_body json_body debug stats_reporting service_v3') }}

[app:public_version_service]
paste.app_factory = keystone.service:public_version_app_factory

[app:admin_version_service]
paste.app_factory = keystone.service:admin_version_app_factory

[pipeline:public_version_api]
pipeline = access_log sizelimit url_normalize xml_body public_version_service

[pipeline:admin_version_api]
pipeline = access_log sizelimit url_normalize xml_body admin_version_service

[composite:main]
use = egg:Paste#urlmap
/v2.0 = public_api
/v3 = api_v3
/ = public_version_api

[composite:admin]
use = egg:Paste#urlmap
/v2.0 = admin_api
/v3 = api_v3
/ = admin_version_api
